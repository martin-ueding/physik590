#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2014 Martin Ueding <dev@martin-ueding.de>

import argparse
import json
import os.path

import prettytable
import unitprint

def p(s):
    f = float(s)
    return unitprint.siunitx(f, allowed_hang=10)

def main():
    options = _parse_args()

    table = prettytable.PrettyTable([
        'ID',
        'iter',
        '1/a_0',
        'σ',
        'corr_size',
        'N',
        'a',
        'corr_max',
        'Δ',
        'irw',
        'Pre Iter',
    ])

    rows = []

    for run in options.runs:
        filename = '{run}/{run}-options.js'.format(run=run)
        if not os.path.isfile(filename):
            continue

        with open(filename) as f:
            info = json.load(f)

        rows.append([
            run,
            p(info['iterations']),
            p(info['inverse_scattering_length']),
            p(info['gauss_width']),
            p(info['correlation_size']),
            p(info['time_sites']),
            p(info['time_step']),
            p(info['correlation_ts'][-1] * info['time_step']),
            p(info['margin']),
            p(info['initial_random_width']),
            p(info['pre_iterations']),
        ])

    for j in range(len(rows[0])):
        max_pre = 0
        max_post = 0
        for i in range(len(rows)):
            if '.' in rows[i][j]:
                parts = rows[i][j].split('.')
                max_post = max(len(parts[1]) + 1, max_post)
            else:
                parts = [rows[i][j], '']
                max_post = max(len(parts[1]), max_post)
            max_pre = max(len(parts[0]), max_pre)
        for i in range(len(rows)):
            parts = rows[i][j].split('.')
            if '.' in rows[i][j]:
                parts = rows[i][j].split('.')
            else:
                parts = [rows[i][j], '']
            new_parts = []
            if len(parts[0]) < max_pre:
                new_parts.append(' '*(max_pre - len(parts[0])))
            new_parts.append(rows[i][j])
            if len(parts[1]) < max_post:
                new_parts.append(' '*(max_post - len(parts[1])))
            rows[i][j] = ''.join(new_parts)

    for row in rows:
        table.add_row(row)

    print(table)

def _parse_args():
    """
    Parses the command line arguments.

    If the logging module is imported, set the level according to the number of
    ``-v`` given on the command line.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    parser.add_argument("runs", nargs="+", help="Run IDs")

    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()
