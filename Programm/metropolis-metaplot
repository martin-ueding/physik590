#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2014 Martin Ueding <dev@martin-ueding.de>

import argparse

import colorsys
import matplotlib.pyplot as pl
import mpl_toolkits.mplot3d.axes3d as p3
import numpy as np
import numpy.random
import prettytable
import scipy.optimize as op
import unitprint

def fit(functor, x, y, yerr=None, steps=1000, **kwargs):
    popt, pconv = op.curve_fit(functor, x, y, sigma=yerr, **kwargs)

    plot_x = np.linspace(np.min(x), np.max(x), steps)
    plot_y = functor(plot_x, *popt)

    try:
        err = np.sqrt(pconv.diagonal())
    except AttributeError:
        err = pconv

    return popt, err, plot_x, plot_y

def coloriter(n):
    for x in range(n):
        yield colorsys.hsv_to_rgb(x*1.0/n, 1.0, .8)

def quadratic(x, a, b, c):
    return a + b * x + x**2 * c

def make_col(data, col, ylabel, outfile, harmonic, anharmonic, show=False):
    group_by(data, col, r'$\sigma$', ylabel, 'sigma-'+outfile, harmonic, anharmonic, 1, 0, 'a', 0, 1000, show)
    group_by(data, col, r'$a$', ylabel, 'a-'+outfile, harmonic, anharmonic, 0, 1, r'\sigma', 0., 0.05, show)

def bootstrap_fit(function, x, y, yerr):
    origins = []

    for sample_id in range(len(x)):
        boot_x = []
        boot_y = []
        boot_yerr = []
        for idx in numpy.random.randint(0, len(x), len(x)):
            boot_x.append(x[idx])
            boot_y.append(y[idx])
            boot_yerr.append(yerr[idx])

        popt, pconv = op.curve_fit(function, np.array(boot_x),
                                   np.array(boot_y), sigma=np.array(boot_yerr))

        origins.append(function(0, *popt))

    return np.mean(origins), np.std(origins)

def group_by(data, col, xlabel, ylabel, outfile, harmonic, anharmonic, group_col, free_col, legend, fit_min, fit_max, show):
    time_groups = {}
    data = data[data[:, free_col].argsort()]
    for row in range(len(data[:, group_col])):
        time_step = data[row, group_col]
        if not time_step in time_groups:
            time_groups[time_step] = []
        time_groups[time_step].append((data[row, free_col], data[row, col], data[row, col+1]))

    x_min = 0
    x_max = -1000

    meta_fit = []

    i = 0
    ci = coloriter(len(time_groups.items()))
    for time_step, items in sorted(time_groups.items()):
        items = np.array(items)
        gauss_width = items[:, 0]
        y_val = items[:, 1]
        y_err = items[:, 2]

        x_min = min(x_min, np.min(gauss_width))
        x_max = max(x_max, np.max(gauss_width))

        color = next(ci)

        pl.errorbar(gauss_width + i * x_max / 200, y_val, yerr=y_err, label='${} = {:f}$'.format(legend, time_step), marker='|', color=color, linestyle=options.linestyle)

        np.savetxt('{}-{}.csv'.format(outfile, time_step), np.column_stack([gauss_width, y_val, y_err]))

        #i += 1

        # Fit a function to some of the data points
        s = np.logical_and(fit_min <= gauss_width, gauss_width <= fit_max)
        if len(gauss_width[s]) >= 3:
            popt, pconv = op.curve_fit(quadratic, gauss_width[s], y_val[s], sigma=y_err[s])
            plot_x = np.linspace(0, np.max(gauss_width[s]), 1000)
            plot_y = quadratic(plot_x, *popt)
            val0, err0 = bootstrap_fit(quadratic, gauss_width[s], y_val[s], y_err[s])
            meta_fit.append([
                time_step, val0, err0,
            ])

            pl.plot(plot_x, plot_y, color=color, linestyle=options.fit_linestyle)
            np.savetxt(outfile+'-fit-{}.csv'.format(time_step), np.column_stack([plot_x, plot_y]))

    x = np.array([x_min, x_max])
    ones = np.array([1, 1])

    pl.plot(x, ones * harmonic, linestyle='--', color='gray')
    pl.plot(x, ones * anharmonic, linestyle='--', color='black')

    meta_fit = np.array(meta_fit)
    np.savetxt(outfile+'-meta-daten.csv', meta_fit)
    if len(meta_fit) > 0:
        val0, err0 = bootstrap_fit(quadratic, meta_fit[:, 0], meta_fit[:, 1], meta_fit[:, 2])
        print(outfile, unitprint.siunitx(val0, err0))

    pl.title(r'{} gegen {}'.format(ylabel, xlabel))
    pl.xlabel(xlabel)
    pl.ylabel(ylabel)
    pl.grid(True)
    pl.margins(0.1)
    pl.legend(loc='best', prop={'size': 9})
    if show:
        pl.show()
    pl.savefig(outfile+'.pdf')
    pl.clf()

def main():
    global options
    options = _parse_args()

    #pl.pcolormesh(raw_data[:, :-1])
    #pl.colorbar() 

    data = np.loadtxt(options.filename)

    make_col(data, 2, r'$E_0$', 'E0', 0.5, -1.94107, True)
    make_col(data, 4, r'$E_2$', 'E2', 2.5, 2.00491)
    make_col(data, 6, r'$E_4$', 'E4', 4.5, 4.11354)
    make_col(data, 8, r'$E_2 - E_0$', 'E2-E0', 2, 3.94598)
    make_col(data, 10, r'$E_4 - E_0$', 'E4-E0', 4, 6.05461)
    make_col(data, 12, r'$E_4 - E_2$', 'E4-E2', 2, 2.10863)

    """
    make_col(data, 2, r'$E_0$', 'E0', 0.5, 1.08389)
    make_col(data, 4, r'$E_2$', 'E2', 2.5, 2.93722)
    make_col(data, 6, r'$E_4$', 'E4', 4.5, 4.86274)
    make_col(data, 8, r'$E_2 - E_0$', 'E2-E0', 2, 1.85333)
    make_col(data, 10, r'$E_4 - E_0$', 'E4-E0', 4, 3.77885)
    make_col(data, 12, r'$E_4 - E_2$', 'E4-E2', 2, 1.92552)
    """


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('filename')
    parser.add_argument('--linestyle', default='solid')
    parser.add_argument('--fit-linestyle', default='solid')
    parser.add_argument('--low', type=float, default=0)

    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()
