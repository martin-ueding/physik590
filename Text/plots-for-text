#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2014 Martin Ueding <dev@martin-ueding.de>

import argparse

import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op
import scipy.special
import unitprint

def gamma_data():
    gamma = scipy.special.gamma
    def f(E):
        return 4 * gamma(0.25 * (5 - 2 * E)) / (2 * E - 1) / gamma(0.25 * (3 - 2 * E))
    E = np.linspace(-3, 9.50001, 1000)
    a0 = f(E)

    x = 1/a0

    limit = 5

    x[x > limit] = limit
    x[x < -limit] = limit

    np.savetxt('_build/gamma_data.csv', np.column_stack([x, E]))

def histogram_theory_continous():
    x = np.linspace(-5, 5, 1000);
    y = 1 / np.sqrt(np.pi) * np.exp(-x**2)
    np.savetxt('_build/histogram_theory_continous.csv', np.column_stack([x, y]))

def histogram_theory_01():
    x = np.linspace(-5, 5, 1000);
    omega = 1.00125
    y = np.sqrt(omega / np.pi) * np.exp(- omega * x**2)
    np.savetxt('_build/histogram_theory_01.csv', np.column_stack([x, y]))

def histogram_theory_1():
    x = np.linspace(-5, 5, 1000);
    omega = 1.11803
    y = np.sqrt(omega / np.pi) * np.exp(- omega * x**2)
    np.savetxt('_build/histogram_theory_1.csv', np.column_stack([x, y]))

def decay(x, tau, ampl):
    return ampl * np.exp(-x / tau)

def run_84DAA2_correlations():
    a = 0.1 # Time step
    data = np.loadtxt('CSV/84DAA2-correlations.csv')
    j = data[:, 0] # Time lattice index
    c = data[:, 1] # Correlation
    c_err = data[:, 2]

    tau = j * a # Imaginary time

    cut = 7
    selection = tau < cut

    tau = tau[selection]
    c = c[selection]
    c_err = c_err[selection]

    popt, pconv = op.curve_fit(decay, tau, c)
    fx = np.linspace(min(tau), max(tau), 1000)
    fy = decay(fx, *popt)

    print(popt)
    print(pconv)

    d = np.sqrt(pconv.diagonal())

    E1_val = 1 / popt[0]
    E1_err = 1 / popt[0]**2 * d[0]

    np.savetxt('_build/84DAA2-data.csv', np.column_stack([tau, c, c_err]))
    np.savetxt('_build/84DAA2-fit.csv', np.column_stack([fx, fy]))

    print(unitprint.siunitx(E1_val, E1_err))



def main():
    options = _parse_args()

    gamma_data()
    histogram_theory_continous()
    histogram_theory_01()
    histogram_theory_1()
    run_84DAA2_correlations()

def _parse_args():
    """
    Parses the command line arguments.

    If the logging module is imported, set the level according to the number of
    ``-v`` given on the command line.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    options = parser.parse_args()

    return options

if __name__ == "__main__":
    main()
